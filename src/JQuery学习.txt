JQuery:

jquery插件使用
$("#player").jPlayer({});


$(document).ready(function(){});
1：标准浏览器使用addEventListener添加DOMContentLoaded和load监听，任何一个事件被触发即可:
2：老版本IE浏览器使用attachEvent添加onreadystatechange和onload来监听，任何一个被触发，
   并且onreadystatechange时document.readyState === "complete"即可。
ready: function( fn ) {
    // Add the callback
    jQuery.ready.promise().done( fn );
    return this;
}
jQuery.ready.promise = function( obj ) {
    if ( !readyList ) {

        readyList = jQuery.Deferred();

        // Catch cases where $(document).ready() is called after the browser event has already occurred.
        // we once tried to use readyState "interactive" here, but it caused issues like the one
        // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
        if ( document.readyState === "complete" ) {
            // Handle it asynchronously to allow scripts the opportunity to delay ready
            setTimeout( jQuery.ready, 1 );

        // Standards-based browsers support DOMContentLoaded
        } else if ( document.addEventListener ) {
            // Use the handy event callback
            document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

            // A fallback to window.onload, that will always work
            window.addEventListener( "load", jQuery.ready, false );

        // If IE event model is used
        } else {
            // Ensure firing before onload, maybe late but safe also for iframes
            document.attachEvent( "onreadystatechange", DOMContentLoaded );

            // A fallback to window.onload, that will always work
            window.attachEvent( "onload", jQuery.ready );

            // If IE and not a frame
            // continually check to see if the document is ready
            var top = false;

            try {
                top = window.frameElement == null && document.documentElement;
            } catch(e) {}

            if ( top && top.doScroll ) {
                (function doScrollCheck() {
                    if ( !jQuery.isReady ) {

                        try {
                            // Use the trick by Diego Perini
                            // http://javascript.nwbox.com/IEContentLoaded/
                            top.doScroll("left");
                        } catch(e) {
                            return setTimeout( doScrollCheck, 50 );
                        }

                        // and execute any waiting functions
                        jQuery.ready();
                    }
                })();
            }
        }
    }
    return readyList.promise( obj ); //在obj对象上面部署Deferred接口，然后可以直接在obj上面调用done()和fail().
};

$.Deferred()对象；
deferred对象是jQuery的回调函数解决方案


$(selector).mouseup(function(){})
当在元素上放松鼠标按钮时，会发生 mouseup 事件。
$(selector).mousemove(function(){})
当鼠标指针在指定的元素中移动时，就会发生 mousemove 事件。

$().find()与$().children();
find返回所有后代中符合的元素；
children返回儿子辈中符合的元素；

$().offset();
offset() 方法返回或设置匹配元素相对于文档的偏移（位置）。$().offset().left  $().offset().top
如果父元素也有margin,broder 的话。它也会受到影响。取值要更大。 因为offset() 取的当前与文档的偏移坐标。

$().siblings(selector);
选取同胞元素；
原始元素不包含在同胞元素中，当我们打算找到 DOM 树的特定层级上的所有元素时，记住一点很重要。


$("p").toggleClass("main");
所有搜到的P标签，人无我有，人有我无；
该方法检查每个元素中指定的类。如果不存在则添加类，如果已设置则删除之。这就是所谓的切换效果。

$("p").removeClass("main");
emoveClass() 方法从被选元素移除一个或多个类。
注释：如果没有规定参数，则该方法将从被选元素中删除所有类。

val();

html();
$("#m-video-poster").html("<img id='poster' src='"+res.videoInfo.bigHeadImg+"' />");

empty();
each(); $.each();
ajax();
append();

attr();
$("img").attr("src");获取所有img的属性；

trigger();
on();

$.extend();
var result=$.extend({},{name:"Tom",age:21},{name:"Jerry",sex:"Boy"})
result={name:"Jerry",age:21,sex:"Boy"}
后面的参数如果和前面的参数存在相同的名称，那么后面的会覆盖前面的参数值.


$.inArray( value, array);
如果array中没有value,返回-1；
如果array中存在value，返回索引位置；
采用严格比较，即，===或!==比较；

$("p").eq(index);
:eq() 选择器选取带有指定 index 值的元素。
index 值从 0 开始;

jQuery.Data();
jQuery.data的是jQuery的数据缓存系统。data() 方法向被选元素附加数据，或者从被选元素获取数据。

$.each();源码实现
each: function( obj, callback ) {
        var length, i = 0;

        if ( isArrayLike( obj ) ) {
            length = obj.length;
            for ( ; i < length; i++ ) {
                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
                    break;
                }
            }
        } else {
            for ( i in obj ) {
                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
                    break;
                }
            }
        }

        return obj;
    }


JQUERY效果

$().animate();
animate() 方法执行 CSS 属性集的自定义动画。
该方法通过CSS样式将元素从一个状态改变为另一个状态。CSS属性值是逐渐改变的，这样就可以创建动画效果。
只有数字值可创建动画（比如 "margin:30px"）。字符串值无法创建动画（比如 "background-color:red"）。

$().stop();停止在被选元素上运行动画

$().clearQueue();
clearQueue() 方法停止队列中所有仍未执行的函数


$().fadeIn();
fadeIn() 方法使用淡入效果来显示被选元素，假如该元素是隐藏的。
提示：如果元素已经显示，则该效果不产生任何变化，除非规定了 callback 函数。
注释：该效果适用于通过 jQuery 隐藏的元素，或在 CSS 中声明 display:none 的元素（但不适用于 visibility:hidden 的元素）。

$().fadeOut();
fadeOut() 方法使用淡出效果来隐藏被选元素，假如该元素是隐藏的。

$().fadeTo();
fadeTo() 方法将被选元素的不透明度逐渐地改变为指定的值。

$().hide();
如果被选的元素已被显示，则隐藏该元素。
提示：如果元素已经是完全可见，则该效果不产生任何变化，除非规定了 callback 函数。
$().show();
如果被选元素已被隐藏，则显示这些元素：
toggle()对被选元素进行隐藏和显示的切换

$().slideDown();
slideDown() 方法通过使用滑动效果，显示隐藏的被选元素。
slideToggle()对被选元素进行滑动隐藏和滑动显示的切换
slideUp()通过调整高度来滑动隐藏被选元素


JQUERY事件

$("div").delegate("button","click",function(){
  $("p").slideToggle();
});
delegate() 方法为指定的元素（属于被选元素的子元素）添加一个或多个事件处理程序，并规定当这些事件发生时运行的函数。
使用 delegate() 方法的事件处理程序适用于当前或未来的元素（比如由脚本创建的新元素）。


$(window).resize();
当调整浏览器窗口的大小时，发生 resize 事件。

$().scroll();
当用户滚动指定的元素时，会发生 scroll 事件。
scroll 事件适用于所有可滚动的元素和 window 对象（浏览器窗口）。
scroll() 方法触发 scroll 事件，或规定当发生 scroll 事件时运行的函数。

$().select() 
当 textarea 或文本类型的 input 元素中的文本被选择时，会发生 select 事件。
select() 方法触发 select 事件，或规定当发生 select 事件时运行的函数。

$("form").submit();
当提交表单时，会发生 submit 事件。

$("p").toggle(
  function(){
  $("body").css("background-color","green");},
  function(){
  $("body").css("background-color","red");},
  function(){
  $("body").css("background-color","yellow");}
);
toggle() 方法用于绑定两个或多个事件处理器函数，以响应被选元素的轮流的 click 事件。

不论鼠标指针穿过被选元素或其子元素，都会触发 mouseover 事件。
只有在鼠标指针穿过被选元素时，才会触发 mouseenter 事件。
不论鼠标指针离开被选元素还是任何子元素，都会触发 mouseout 事件。
只有在鼠标指针离开被选元素时，才会触发 mouseleave 事件。



（1）target.click(function(){});
（2）target.bind("click",function(){});
（3）target.live("click",function(){});
live方法其实是bind方法的变种，其基本功能就同bind方法的功能是一样的，都是为一个元素绑定某个事件，
但是bind方法只能给当前存在的元素绑定事件，对于事后采用JS等方式新生成的元素无效，而live方法则正好弥补了bind方法的这个缺陷，
它可以对后生成的元素也可以绑定相应的事件。

live方法之所以能对后生成的元素也绑定相应的事件的原因归结在“事件委托”上面，
所谓“事件委托”就是指绑定在祖先元素上的事件可以在其后代元素上进行使用。live方法的处理机制就是把事件绑定在DOM树的根节点上，
而不是直接绑定在某个元素上。

$("input").focus();当元素得到焦点时发生 blur 事件。
$("input").blur();当元素失去焦点时发生 blur 事件。

$(".field").change(）；
当元素的值发生改变时，会发生 change 事件。
该事件仅适用于文本域（text field），以及 textarea 和 select 元素。
注释：当用于 select 元素时，change 事件会在选择某个选项时发生。当用于 text field 或 text area 时，该事件会在元素失去焦点时发生。
$("p").one();
当使用 one() 方法时，每个元素只能运行一次事件处理器函数。

$("input").triggerHandler("focus");
只触发绑定事件，不执行浏览器默认操作

$().unbind();
unbind() 方法移除被选元素的事件处理程序。
该方法能够移除所有的或被选的事件处理程序，或者当事件发生时终止指定函数的运行。
ubind() 适用于任何通过 jQuery 附加的事件处理程序。

JQUERY选择器

$("p:first") 第一个元素
$("p:last")  最后一个元素
$("tr:even") 所有偶数元素
$("tr:odd")	所有奇数元素
$("ul li:eq(3)")  index等于3的元素
$("ul li:gt(3)")  index大于3的元素
$("ul li:lt(3)")  index小于3的元素	
$(":header")  所有<h1>--<h6>

$("style[page]") 
if($("style[page]").length>0){return false;}//判断是否存在属性有page的style标签，
$("head").append("<style page=1>"+Jumpcss+Jumpbtn+Jumptext+Pagecss+Page_Son+Page_click+"</style>");



JQUERY CSS操作

JQUERY 遍历
$("p").siblings(".selected").css("background", "yellow");
查找每个 p 元素的所有类名为 "selected" 的所有同胞元素：
$("div").children(".selected").css("color", "blue");
找到类名为 "selected" 的所有 div 的子元素，并将其设置为蓝色：
$("p").parent(".selected")
parent() 获得当前匹配元素集合中每个元素的父元素，使用选择器进行筛选是可选的。

prev() next()

$("p").find("span").css('color','red');
find() 方法获得当前元素集合中每个元素的后代，通过选择器、jQuery 对象或元素来筛选。
$("div").css("background", "#c8ebcc")
  .filter(".middle")
  .css("border-color", "red");
filter() 方法将匹配元素集合缩减为匹配指定选择器的元素。


var my_jq = $.noConflict();
也可以创建自己的简写。noConflict() 可返回对 jQuery 的引用，您可以把它存入变量，以供稍后使用

在body 元素的开头插入内容
 $('body').prepend('<img src="' + url + '" style="display: none;">');


$("a").on("click",$.proxy(stu.move,stu));
改变stu.move方法中的this指向；
$.proxy(stu.move,stu);调用这个方法的时候this指向stu,而不是a标签；



























